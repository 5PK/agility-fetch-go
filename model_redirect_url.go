/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the RedirectUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectUrl{}

// RedirectUrl struct for RedirectUrl
type RedirectUrl struct {
	// Redirect Url.
	Url NullableString `json:"url,omitempty"`
	// Target to open the Url in.
	Target NullableString `json:"target,omitempty"`
}

// NewRedirectUrl instantiates a new RedirectUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectUrl() *RedirectUrl {
	this := RedirectUrl{}
	return &this
}

// NewRedirectUrlWithDefaults instantiates a new RedirectUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectUrlWithDefaults() *RedirectUrl {
	this := RedirectUrl{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedirectUrl) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedirectUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *RedirectUrl) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *RedirectUrl) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *RedirectUrl) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *RedirectUrl) UnsetUrl() {
	o.Url.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedirectUrl) GetTarget() string {
	if o == nil || IsNil(o.Target.Get()) {
		var ret string
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedirectUrl) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *RedirectUrl) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableString and assigns it to the Target field.
func (o *RedirectUrl) SetTarget(v string) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *RedirectUrl) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *RedirectUrl) UnsetTarget() {
	o.Target.Unset()
}

func (o RedirectUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	return toSerialize, nil
}

type NullableRedirectUrl struct {
	value *RedirectUrl
	isSet bool
}

func (v NullableRedirectUrl) Get() *RedirectUrl {
	return v.value
}

func (v *NullableRedirectUrl) Set(val *RedirectUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectUrl(val *RedirectUrl) *NullableRedirectUrl {
	return &NullableRedirectUrl{value: val, isSet: true}
}

func (v NullableRedirectUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


