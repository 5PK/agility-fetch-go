/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentPageBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentPageBase{}

// HeadlessContentPageBase struct for HeadlessContentPageBase
type HeadlessContentPageBase struct {
	// ID of the page.
	PageID *int32 `json:"pageID,omitempty"`
	// Page name.
	Name NullableString `json:"name,omitempty"`
	// Path of the page.
	Path NullableString `json:"path,omitempty"`
	// Title of the page.
	Title NullableString `json:"title,omitempty"`
	// Menu text for the page.
	MenuText NullableString `json:"menuText,omitempty"`
	Visible *HeadlessContentPageVisibility `json:"visible,omitempty"`
}

// NewHeadlessContentPageBase instantiates a new HeadlessContentPageBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentPageBase() *HeadlessContentPageBase {
	this := HeadlessContentPageBase{}
	return &this
}

// NewHeadlessContentPageBaseWithDefaults instantiates a new HeadlessContentPageBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentPageBaseWithDefaults() *HeadlessContentPageBase {
	this := HeadlessContentPageBase{}
	return &this
}

// GetPageID returns the PageID field value if set, zero value otherwise.
func (o *HeadlessContentPageBase) GetPageID() int32 {
	if o == nil || IsNil(o.PageID) {
		var ret int32
		return ret
	}
	return *o.PageID
}

// GetPageIDOk returns a tuple with the PageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageBase) GetPageIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PageID) {
		return nil, false
	}
	return o.PageID, true
}

// HasPageID returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasPageID() bool {
	if o != nil && !IsNil(o.PageID) {
		return true
	}

	return false
}

// SetPageID gets a reference to the given int32 and assigns it to the PageID field.
func (o *HeadlessContentPageBase) SetPageID(v int32) {
	o.PageID = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPageBase) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPageBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HeadlessContentPageBase) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *HeadlessContentPageBase) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HeadlessContentPageBase) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPageBase) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPageBase) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *HeadlessContentPageBase) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *HeadlessContentPageBase) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *HeadlessContentPageBase) UnsetPath() {
	o.Path.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPageBase) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPageBase) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *HeadlessContentPageBase) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *HeadlessContentPageBase) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *HeadlessContentPageBase) UnsetTitle() {
	o.Title.Unset()
}

// GetMenuText returns the MenuText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPageBase) GetMenuText() string {
	if o == nil || IsNil(o.MenuText.Get()) {
		var ret string
		return ret
	}
	return *o.MenuText.Get()
}

// GetMenuTextOk returns a tuple with the MenuText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPageBase) GetMenuTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MenuText.Get(), o.MenuText.IsSet()
}

// HasMenuText returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasMenuText() bool {
	if o != nil && o.MenuText.IsSet() {
		return true
	}

	return false
}

// SetMenuText gets a reference to the given NullableString and assigns it to the MenuText field.
func (o *HeadlessContentPageBase) SetMenuText(v string) {
	o.MenuText.Set(&v)
}
// SetMenuTextNil sets the value for MenuText to be an explicit nil
func (o *HeadlessContentPageBase) SetMenuTextNil() {
	o.MenuText.Set(nil)
}

// UnsetMenuText ensures that no value is present for MenuText, not even an explicit nil
func (o *HeadlessContentPageBase) UnsetMenuText() {
	o.MenuText.Unset()
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *HeadlessContentPageBase) GetVisible() HeadlessContentPageVisibility {
	if o == nil || IsNil(o.Visible) {
		var ret HeadlessContentPageVisibility
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageBase) GetVisibleOk() (*HeadlessContentPageVisibility, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *HeadlessContentPageBase) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given HeadlessContentPageVisibility and assigns it to the Visible field.
func (o *HeadlessContentPageBase) SetVisible(v HeadlessContentPageVisibility) {
	o.Visible = &v
}

func (o HeadlessContentPageBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentPageBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageID) {
		toSerialize["pageID"] = o.PageID
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.MenuText.IsSet() {
		toSerialize["menuText"] = o.MenuText.Get()
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

type NullableHeadlessContentPageBase struct {
	value *HeadlessContentPageBase
	isSet bool
}

func (v NullableHeadlessContentPageBase) Get() *HeadlessContentPageBase {
	return v.value
}

func (v *NullableHeadlessContentPageBase) Set(val *HeadlessContentPageBase) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentPageBase) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentPageBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentPageBase(val *HeadlessContentPageBase) *NullableHeadlessContentPageBase {
	return &NullableHeadlessContentPageBase{value: val, isSet: true}
}

func (v NullableHeadlessContentPageBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentPageBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


