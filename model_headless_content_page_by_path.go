/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentPageByPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentPageByPath{}

// HeadlessContentPageByPath struct for HeadlessContentPageByPath
type HeadlessContentPageByPath struct {
	SitemapNode *HeadlessContentPageBase `json:"sitemapNode,omitempty"`
	Page *HeadlessContentPage `json:"page,omitempty"`
}

// NewHeadlessContentPageByPath instantiates a new HeadlessContentPageByPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentPageByPath() *HeadlessContentPageByPath {
	this := HeadlessContentPageByPath{}
	return &this
}

// NewHeadlessContentPageByPathWithDefaults instantiates a new HeadlessContentPageByPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentPageByPathWithDefaults() *HeadlessContentPageByPath {
	this := HeadlessContentPageByPath{}
	return &this
}

// GetSitemapNode returns the SitemapNode field value if set, zero value otherwise.
func (o *HeadlessContentPageByPath) GetSitemapNode() HeadlessContentPageBase {
	if o == nil || IsNil(o.SitemapNode) {
		var ret HeadlessContentPageBase
		return ret
	}
	return *o.SitemapNode
}

// GetSitemapNodeOk returns a tuple with the SitemapNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageByPath) GetSitemapNodeOk() (*HeadlessContentPageBase, bool) {
	if o == nil || IsNil(o.SitemapNode) {
		return nil, false
	}
	return o.SitemapNode, true
}

// HasSitemapNode returns a boolean if a field has been set.
func (o *HeadlessContentPageByPath) HasSitemapNode() bool {
	if o != nil && !IsNil(o.SitemapNode) {
		return true
	}

	return false
}

// SetSitemapNode gets a reference to the given HeadlessContentPageBase and assigns it to the SitemapNode field.
func (o *HeadlessContentPageByPath) SetSitemapNode(v HeadlessContentPageBase) {
	o.SitemapNode = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *HeadlessContentPageByPath) GetPage() HeadlessContentPage {
	if o == nil || IsNil(o.Page) {
		var ret HeadlessContentPage
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageByPath) GetPageOk() (*HeadlessContentPage, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *HeadlessContentPageByPath) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given HeadlessContentPage and assigns it to the Page field.
func (o *HeadlessContentPageByPath) SetPage(v HeadlessContentPage) {
	o.Page = &v
}

func (o HeadlessContentPageByPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentPageByPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SitemapNode) {
		toSerialize["sitemapNode"] = o.SitemapNode
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullableHeadlessContentPageByPath struct {
	value *HeadlessContentPageByPath
	isSet bool
}

func (v NullableHeadlessContentPageByPath) Get() *HeadlessContentPageByPath {
	return v.value
}

func (v *NullableHeadlessContentPageByPath) Set(val *HeadlessContentPageByPath) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentPageByPath) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentPageByPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentPageByPath(val *HeadlessContentPageByPath) *NullableHeadlessContentPageByPath {
	return &NullableHeadlessContentPageByPath{value: val, isSet: true}
}

func (v NullableHeadlessContentPageByPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentPageByPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


