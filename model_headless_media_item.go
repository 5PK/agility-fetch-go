/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
	 
)

// checks if the HeadlessMediaItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessMediaItem{}

// HeadlessMediaItem struct for HeadlessMediaItem
type HeadlessMediaItem struct {
	// media Id.
	MediaID *int32 `json:"mediaID,omitempty"`
	// Media item file name.
	FileName NullableString `json:"fileName,omitempty"`
	// Url that media item can be accessed at.
	Url NullableString `json:"url,omitempty"`
	// Size of media item in bytes.
	Size *int32 `json:"size,omitempty"`
	// Last modified date.
	ModifiedOn *string `json:"modifiedOn,omitempty"`
	// List of meta data related to media item in key value format.
	MetaData map[string]string `json:"metaData,omitempty"`
}

// NewHeadlessMediaItem instantiates a new HeadlessMediaItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessMediaItem() *HeadlessMediaItem {
	this := HeadlessMediaItem{}
	return &this
}

// NewHeadlessMediaItemWithDefaults instantiates a new HeadlessMediaItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessMediaItemWithDefaults() *HeadlessMediaItem {
	this := HeadlessMediaItem{}
	return &this
}

// GetMediaID returns the MediaID field value if set, zero value otherwise.
func (o *HeadlessMediaItem) GetMediaID() int32 {
	if o == nil || IsNil(o.MediaID) {
		var ret int32
		return ret
	}
	return *o.MediaID
}

// GetMediaIDOk returns a tuple with the MediaID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessMediaItem) GetMediaIDOk() (*int32, bool) {
	if o == nil || IsNil(o.MediaID) {
		return nil, false
	}
	return o.MediaID, true
}

// HasMediaID returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasMediaID() bool {
	if o != nil && !IsNil(o.MediaID) {
		return true
	}

	return false
}

// SetMediaID gets a reference to the given int32 and assigns it to the MediaID field.
func (o *HeadlessMediaItem) SetMediaID(v int32) {
	o.MediaID = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessMediaItem) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessMediaItem) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *HeadlessMediaItem) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *HeadlessMediaItem) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *HeadlessMediaItem) UnsetFileName() {
	o.FileName.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessMediaItem) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessMediaItem) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *HeadlessMediaItem) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *HeadlessMediaItem) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *HeadlessMediaItem) UnsetUrl() {
	o.Url.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *HeadlessMediaItem) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessMediaItem) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *HeadlessMediaItem) SetSize(v int32) {
	o.Size = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *HeadlessMediaItem) GetModifiedOn() string {
	if o == nil || IsNil(o.ModifiedOn) {
		var ret string
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessMediaItem) GetModifiedOnOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedOn) {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasModifiedOn() bool {
	if o != nil && !IsNil(o.ModifiedOn) {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given string and assigns it to the ModifiedOn field.
func (o *HeadlessMediaItem) SetModifiedOn(v string) {
	o.ModifiedOn = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessMediaItem) GetMetaData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessMediaItem) GetMetaDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return &o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *HeadlessMediaItem) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]string and assigns it to the MetaData field.
func (o *HeadlessMediaItem) SetMetaData(v map[string]string) {
	o.MetaData = v
}

func (o HeadlessMediaItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessMediaItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaID) {
		toSerialize["mediaID"] = o.MediaID
	}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ModifiedOn) {
		toSerialize["modifiedOn"] = o.ModifiedOn
	}
	if o.MetaData != nil {
		toSerialize["metaData"] = o.MetaData
	}
	return toSerialize, nil
}

type NullableHeadlessMediaItem struct {
	value *HeadlessMediaItem
	isSet bool
}

func (v NullableHeadlessMediaItem) Get() *HeadlessMediaItem {
	return v.value
}

func (v *NullableHeadlessMediaItem) Set(val *HeadlessMediaItem) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessMediaItem) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessMediaItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessMediaItem(val *HeadlessMediaItem) *NullableHeadlessMediaItem {
	return &NullableHeadlessMediaItem{value: val, isSet: true}
}

func (v NullableHeadlessMediaItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessMediaItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


