/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
	"fmt"
)

// APIType the model 'APIType'
type APIType string

// List of APIType
const (
	PREVIEW APIType = "preview"
	FETCH APIType = "fetch"
)

// All allowed values of APIType enum
var AllowedAPITypeEnumValues = []APIType{
	"preview",
	"fetch",
}

func (v *APIType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIType(value)
	for _, existing := range AllowedAPITypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIType", value)
}

// NewAPITypeFromValue returns a pointer to a valid APIType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPITypeFromValue(v string) (*APIType, error) {
	ev := APIType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIType: valid values are %v", v, AllowedAPITypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIType) IsValid() bool {
	for _, existing := range AllowedAPITypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIType value
func (v APIType) Ptr() *APIType {
	return &v
}

type NullableAPIType struct {
	value *APIType
	isSet bool
}

func (v NullableAPIType) Get() *APIType {
	return v.value
}

func (v *NullableAPIType) Set(val *APIType) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIType) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIType(val *APIType) *NullableAPIType {
	return &NullableAPIType{value: val, isSet: true}
}

func (v NullableAPIType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

