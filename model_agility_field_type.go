/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
	"fmt"
)

// AgilityFieldType the model 'AgilityFieldType'
type AgilityFieldType int32

// List of AgilityFieldType
const (
	_0 AgilityFieldType = 0
	_1 AgilityFieldType = 1
	_2 AgilityFieldType = 2
	_3 AgilityFieldType = 3
	_4 AgilityFieldType = 4
	_5 AgilityFieldType = 5
	_6 AgilityFieldType = 6
	_7 AgilityFieldType = 7
	_8 AgilityFieldType = 8
	_9 AgilityFieldType = 9
	_10 AgilityFieldType = 10
	_11 AgilityFieldType = 11
	_12 AgilityFieldType = 12
	_13 AgilityFieldType = 13
	_14 AgilityFieldType = 14
	_15 AgilityFieldType = 15
	_16 AgilityFieldType = 16
)

// All allowed values of AgilityFieldType enum
var AllowedAgilityFieldTypeEnumValues = []AgilityFieldType{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
}

func (v *AgilityFieldType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgilityFieldType(value)
	for _, existing := range AllowedAgilityFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgilityFieldType", value)
}

// NewAgilityFieldTypeFromValue returns a pointer to a valid AgilityFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgilityFieldTypeFromValue(v int32) (*AgilityFieldType, error) {
	ev := AgilityFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgilityFieldType: valid values are %v", v, AllowedAgilityFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgilityFieldType) IsValid() bool {
	for _, existing := range AllowedAgilityFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgilityFieldType value
func (v AgilityFieldType) Ptr() *AgilityFieldType {
	return &v
}

type NullableAgilityFieldType struct {
	value *AgilityFieldType
	isSet bool
}

func (v NullableAgilityFieldType) Get() *AgilityFieldType {
	return v.value
}

func (v *NullableAgilityFieldType) Set(val *AgilityFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgilityFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgilityFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgilityFieldType(val *AgilityFieldType) *NullableAgilityFieldType {
	return &NullableAgilityFieldType{value: val, isSet: true}
}

func (v NullableAgilityFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgilityFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

