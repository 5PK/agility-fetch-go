/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentListResponse{}

// HeadlessContentListResponse struct for HeadlessContentListResponse
type HeadlessContentListResponse struct {
	// The paginated items returned from the query.
	Items []HeadlessContentItem `json:"items,omitempty"`
	// The total number of items in the list (excluding any pagination).
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewHeadlessContentListResponse instantiates a new HeadlessContentListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentListResponse() *HeadlessContentListResponse {
	this := HeadlessContentListResponse{}
	return &this
}

// NewHeadlessContentListResponseWithDefaults instantiates a new HeadlessContentListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentListResponseWithDefaults() *HeadlessContentListResponse {
	this := HeadlessContentListResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentListResponse) GetItems() []HeadlessContentItem {
	if o == nil {
		var ret []HeadlessContentItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentListResponse) GetItemsOk() ([]HeadlessContentItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *HeadlessContentListResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []HeadlessContentItem and assigns it to the Items field.
func (o *HeadlessContentListResponse) SetItems(v []HeadlessContentItem) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *HeadlessContentListResponse) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentListResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *HeadlessContentListResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *HeadlessContentListResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o HeadlessContentListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableHeadlessContentListResponse struct {
	value *HeadlessContentListResponse
	isSet bool
}

func (v NullableHeadlessContentListResponse) Get() *HeadlessContentListResponse {
	return v.value
}

func (v *NullableHeadlessContentListResponse) Set(val *HeadlessContentListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentListResponse(val *HeadlessContentListResponse) *NullableHeadlessContentListResponse {
	return &NullableHeadlessContentListResponse{value: val, isSet: true}
}

func (v NullableHeadlessContentListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


