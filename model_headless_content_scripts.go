/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentScripts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentScripts{}

// HeadlessContentScripts struct for HeadlessContentScripts
type HeadlessContentScripts struct {
	// Indicates if scripts are excluded from global.
	ExcludedFromGlobal *bool `json:"excludedFromGlobal,omitempty"`
	// Scripts to include on top of the page.
	Top NullableString `json:"top,omitempty"`
	// Scripts to include on the bottom of the page.
	Bottom NullableString `json:"bottom,omitempty"`
}

// NewHeadlessContentScripts instantiates a new HeadlessContentScripts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentScripts() *HeadlessContentScripts {
	this := HeadlessContentScripts{}
	return &this
}

// NewHeadlessContentScriptsWithDefaults instantiates a new HeadlessContentScripts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentScriptsWithDefaults() *HeadlessContentScripts {
	this := HeadlessContentScripts{}
	return &this
}

// GetExcludedFromGlobal returns the ExcludedFromGlobal field value if set, zero value otherwise.
func (o *HeadlessContentScripts) GetExcludedFromGlobal() bool {
	if o == nil || IsNil(o.ExcludedFromGlobal) {
		var ret bool
		return ret
	}
	return *o.ExcludedFromGlobal
}

// GetExcludedFromGlobalOk returns a tuple with the ExcludedFromGlobal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentScripts) GetExcludedFromGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludedFromGlobal) {
		return nil, false
	}
	return o.ExcludedFromGlobal, true
}

// HasExcludedFromGlobal returns a boolean if a field has been set.
func (o *HeadlessContentScripts) HasExcludedFromGlobal() bool {
	if o != nil && !IsNil(o.ExcludedFromGlobal) {
		return true
	}

	return false
}

// SetExcludedFromGlobal gets a reference to the given bool and assigns it to the ExcludedFromGlobal field.
func (o *HeadlessContentScripts) SetExcludedFromGlobal(v bool) {
	o.ExcludedFromGlobal = &v
}

// GetTop returns the Top field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentScripts) GetTop() string {
	if o == nil || IsNil(o.Top.Get()) {
		var ret string
		return ret
	}
	return *o.Top.Get()
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentScripts) GetTopOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Top.Get(), o.Top.IsSet()
}

// HasTop returns a boolean if a field has been set.
func (o *HeadlessContentScripts) HasTop() bool {
	if o != nil && o.Top.IsSet() {
		return true
	}

	return false
}

// SetTop gets a reference to the given NullableString and assigns it to the Top field.
func (o *HeadlessContentScripts) SetTop(v string) {
	o.Top.Set(&v)
}
// SetTopNil sets the value for Top to be an explicit nil
func (o *HeadlessContentScripts) SetTopNil() {
	o.Top.Set(nil)
}

// UnsetTop ensures that no value is present for Top, not even an explicit nil
func (o *HeadlessContentScripts) UnsetTop() {
	o.Top.Unset()
}

// GetBottom returns the Bottom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentScripts) GetBottom() string {
	if o == nil || IsNil(o.Bottom.Get()) {
		var ret string
		return ret
	}
	return *o.Bottom.Get()
}

// GetBottomOk returns a tuple with the Bottom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentScripts) GetBottomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bottom.Get(), o.Bottom.IsSet()
}

// HasBottom returns a boolean if a field has been set.
func (o *HeadlessContentScripts) HasBottom() bool {
	if o != nil && o.Bottom.IsSet() {
		return true
	}

	return false
}

// SetBottom gets a reference to the given NullableString and assigns it to the Bottom field.
func (o *HeadlessContentScripts) SetBottom(v string) {
	o.Bottom.Set(&v)
}
// SetBottomNil sets the value for Bottom to be an explicit nil
func (o *HeadlessContentScripts) SetBottomNil() {
	o.Bottom.Set(nil)
}

// UnsetBottom ensures that no value is present for Bottom, not even an explicit nil
func (o *HeadlessContentScripts) UnsetBottom() {
	o.Bottom.Unset()
}

func (o HeadlessContentScripts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentScripts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExcludedFromGlobal) {
		toSerialize["excludedFromGlobal"] = o.ExcludedFromGlobal
	}
	if o.Top.IsSet() {
		toSerialize["top"] = o.Top.Get()
	}
	if o.Bottom.IsSet() {
		toSerialize["bottom"] = o.Bottom.Get()
	}
	return toSerialize, nil
}

type NullableHeadlessContentScripts struct {
	value *HeadlessContentScripts
	isSet bool
}

func (v NullableHeadlessContentScripts) Get() *HeadlessContentScripts {
	return v.value
}

func (v *NullableHeadlessContentScripts) Set(val *HeadlessContentScripts) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentScripts) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentScripts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentScripts(val *HeadlessContentScripts) *NullableHeadlessContentScripts {
	return &NullableHeadlessContentScripts{value: val, isSet: true}
}

func (v NullableHeadlessContentScripts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentScripts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


