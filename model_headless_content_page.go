/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentPage{}

// HeadlessContentPage struct for HeadlessContentPage
type HeadlessContentPage struct {
	// ID of the page.
	PageID *int32 `json:"pageID,omitempty"`
	// Page name.
	Name NullableString `json:"name,omitempty"`
	// Path of the page.
	Path NullableString `json:"path,omitempty"`
	// Title of the page.
	Title NullableString `json:"title,omitempty"`
	// Menu text for the page.
	MenuText NullableString `json:"menuText,omitempty"`
	Visible *HeadlessContentPageVisibility `json:"visible,omitempty"`
	// Name of the template used to create the page.
	TemplateName NullableString `json:"templateName,omitempty"`
	// Redirect url of the page.
	RedirectUrl NullableString `json:"redirectUrl,omitempty"`
	// Indicates if the page is secure.
	SecurePage *bool `json:"securePage,omitempty"`
	// Indicates if the page is excluded from cache.
	ExcludeFromOutputCache *bool `json:"excludeFromOutputCache,omitempty"`
	Seo *HeadlessContentItemSeo `json:"seo,omitempty"`
	Scripts *HeadlessContentScripts `json:"scripts,omitempty"`
	Properties *HeadlessContentItemProperties `json:"properties,omitempty"`
	// Zones on the page defined by the template
	Zones map[string][]HeadlessContentZone `json:"zones,omitempty"`
}

// NewHeadlessContentPage instantiates a new HeadlessContentPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentPage() *HeadlessContentPage {
	this := HeadlessContentPage{}
	return &this
}

// NewHeadlessContentPageWithDefaults instantiates a new HeadlessContentPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentPageWithDefaults() *HeadlessContentPage {
	this := HeadlessContentPage{}
	return &this
}

// GetPageID returns the PageID field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetPageID() int32 {
	if o == nil || IsNil(o.PageID) {
		var ret int32
		return ret
	}
	return *o.PageID
}

// GetPageIDOk returns a tuple with the PageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetPageIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PageID) {
		return nil, false
	}
	return o.PageID, true
}

// HasPageID returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasPageID() bool {
	if o != nil && !IsNil(o.PageID) {
		return true
	}

	return false
}

// SetPageID gets a reference to the given int32 and assigns it to the PageID field.
func (o *HeadlessContentPage) SetPageID(v int32) {
	o.PageID = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HeadlessContentPage) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *HeadlessContentPage) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HeadlessContentPage) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *HeadlessContentPage) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *HeadlessContentPage) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *HeadlessContentPage) UnsetPath() {
	o.Path.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *HeadlessContentPage) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *HeadlessContentPage) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *HeadlessContentPage) UnsetTitle() {
	o.Title.Unset()
}

// GetMenuText returns the MenuText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetMenuText() string {
	if o == nil || IsNil(o.MenuText.Get()) {
		var ret string
		return ret
	}
	return *o.MenuText.Get()
}

// GetMenuTextOk returns a tuple with the MenuText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetMenuTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MenuText.Get(), o.MenuText.IsSet()
}

// HasMenuText returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasMenuText() bool {
	if o != nil && o.MenuText.IsSet() {
		return true
	}

	return false
}

// SetMenuText gets a reference to the given NullableString and assigns it to the MenuText field.
func (o *HeadlessContentPage) SetMenuText(v string) {
	o.MenuText.Set(&v)
}
// SetMenuTextNil sets the value for MenuText to be an explicit nil
func (o *HeadlessContentPage) SetMenuTextNil() {
	o.MenuText.Set(nil)
}

// UnsetMenuText ensures that no value is present for MenuText, not even an explicit nil
func (o *HeadlessContentPage) UnsetMenuText() {
	o.MenuText.Unset()
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetVisible() HeadlessContentPageVisibility {
	if o == nil || IsNil(o.Visible) {
		var ret HeadlessContentPageVisibility
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetVisibleOk() (*HeadlessContentPageVisibility, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given HeadlessContentPageVisibility and assigns it to the Visible field.
func (o *HeadlessContentPage) SetVisible(v HeadlessContentPageVisibility) {
	o.Visible = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName.Get()) {
		var ret string
		return ret
	}
	return *o.TemplateName.Get()
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateName.Get(), o.TemplateName.IsSet()
}

// HasTemplateName returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasTemplateName() bool {
	if o != nil && o.TemplateName.IsSet() {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given NullableString and assigns it to the TemplateName field.
func (o *HeadlessContentPage) SetTemplateName(v string) {
	o.TemplateName.Set(&v)
}
// SetTemplateNameNil sets the value for TemplateName to be an explicit nil
func (o *HeadlessContentPage) SetTemplateNameNil() {
	o.TemplateName.Set(nil)
}

// UnsetTemplateName ensures that no value is present for TemplateName, not even an explicit nil
func (o *HeadlessContentPage) UnsetTemplateName() {
	o.TemplateName.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *HeadlessContentPage) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *HeadlessContentPage) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *HeadlessContentPage) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetSecurePage returns the SecurePage field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetSecurePage() bool {
	if o == nil || IsNil(o.SecurePage) {
		var ret bool
		return ret
	}
	return *o.SecurePage
}

// GetSecurePageOk returns a tuple with the SecurePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetSecurePageOk() (*bool, bool) {
	if o == nil || IsNil(o.SecurePage) {
		return nil, false
	}
	return o.SecurePage, true
}

// HasSecurePage returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasSecurePage() bool {
	if o != nil && !IsNil(o.SecurePage) {
		return true
	}

	return false
}

// SetSecurePage gets a reference to the given bool and assigns it to the SecurePage field.
func (o *HeadlessContentPage) SetSecurePage(v bool) {
	o.SecurePage = &v
}

// GetExcludeFromOutputCache returns the ExcludeFromOutputCache field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetExcludeFromOutputCache() bool {
	if o == nil || IsNil(o.ExcludeFromOutputCache) {
		var ret bool
		return ret
	}
	return *o.ExcludeFromOutputCache
}

// GetExcludeFromOutputCacheOk returns a tuple with the ExcludeFromOutputCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetExcludeFromOutputCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFromOutputCache) {
		return nil, false
	}
	return o.ExcludeFromOutputCache, true
}

// HasExcludeFromOutputCache returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasExcludeFromOutputCache() bool {
	if o != nil && !IsNil(o.ExcludeFromOutputCache) {
		return true
	}

	return false
}

// SetExcludeFromOutputCache gets a reference to the given bool and assigns it to the ExcludeFromOutputCache field.
func (o *HeadlessContentPage) SetExcludeFromOutputCache(v bool) {
	o.ExcludeFromOutputCache = &v
}

// GetSeo returns the Seo field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetSeo() HeadlessContentItemSeo {
	if o == nil || IsNil(o.Seo) {
		var ret HeadlessContentItemSeo
		return ret
	}
	return *o.Seo
}

// GetSeoOk returns a tuple with the Seo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetSeoOk() (*HeadlessContentItemSeo, bool) {
	if o == nil || IsNil(o.Seo) {
		return nil, false
	}
	return o.Seo, true
}

// HasSeo returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasSeo() bool {
	if o != nil && !IsNil(o.Seo) {
		return true
	}

	return false
}

// SetSeo gets a reference to the given HeadlessContentItemSeo and assigns it to the Seo field.
func (o *HeadlessContentPage) SetSeo(v HeadlessContentItemSeo) {
	o.Seo = &v
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetScripts() HeadlessContentScripts {
	if o == nil || IsNil(o.Scripts) {
		var ret HeadlessContentScripts
		return ret
	}
	return *o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetScriptsOk() (*HeadlessContentScripts, bool) {
	if o == nil || IsNil(o.Scripts) {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasScripts() bool {
	if o != nil && !IsNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given HeadlessContentScripts and assigns it to the Scripts field.
func (o *HeadlessContentPage) SetScripts(v HeadlessContentScripts) {
	o.Scripts = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *HeadlessContentPage) GetProperties() HeadlessContentItemProperties {
	if o == nil || IsNil(o.Properties) {
		var ret HeadlessContentItemProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPage) GetPropertiesOk() (*HeadlessContentItemProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given HeadlessContentItemProperties and assigns it to the Properties field.
func (o *HeadlessContentPage) SetProperties(v HeadlessContentItemProperties) {
	o.Properties = &v
}

// GetZones returns the Zones field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentPage) GetZones() map[string][]HeadlessContentZone {
	if o == nil {
		var ret map[string][]HeadlessContentZone
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentPage) GetZonesOk() (*map[string][]HeadlessContentZone, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return &o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *HeadlessContentPage) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given map[string][]HeadlessContentZone and assigns it to the Zones field.
func (o *HeadlessContentPage) SetZones(v map[string][]HeadlessContentZone) {
	o.Zones = v
}

func (o HeadlessContentPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageID) {
		toSerialize["pageID"] = o.PageID
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.MenuText.IsSet() {
		toSerialize["menuText"] = o.MenuText.Get()
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if o.TemplateName.IsSet() {
		toSerialize["templateName"] = o.TemplateName.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirectUrl"] = o.RedirectUrl.Get()
	}
	if !IsNil(o.SecurePage) {
		toSerialize["securePage"] = o.SecurePage
	}
	if !IsNil(o.ExcludeFromOutputCache) {
		toSerialize["excludeFromOutputCache"] = o.ExcludeFromOutputCache
	}
	if !IsNil(o.Seo) {
		toSerialize["seo"] = o.Seo
	}
	if !IsNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	return toSerialize, nil
}

type NullableHeadlessContentPage struct {
	value *HeadlessContentPage
	isSet bool
}

func (v NullableHeadlessContentPage) Get() *HeadlessContentPage {
	return v.value
}

func (v *NullableHeadlessContentPage) Set(val *HeadlessContentPage) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentPage) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentPage(val *HeadlessContentPage) *NullableHeadlessContentPage {
	return &NullableHeadlessContentPage{value: val, isSet: true}
}

func (v NullableHeadlessContentPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


