/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentItem{}

// HeadlessContentItem struct for HeadlessContentItem
type HeadlessContentItem struct {
	// The unique ID of the content item in this locale.
	ContentID *int32 `json:"contentID,omitempty"`
	// The system properties of the content item.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// A dictionary of the fields and the values of the content item.
	Fields map[string]interface{} `json:"fields,omitempty"`
	// SEO related fields for the content item. This is only returned for Dynamic Page Items.
	Seo map[string]interface{} `json:"seo,omitempty"`
}

// NewHeadlessContentItem instantiates a new HeadlessContentItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentItem() *HeadlessContentItem {
	this := HeadlessContentItem{}
	return &this
}

// NewHeadlessContentItemWithDefaults instantiates a new HeadlessContentItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentItemWithDefaults() *HeadlessContentItem {
	this := HeadlessContentItem{}
	return &this
}

// GetContentID returns the ContentID field value if set, zero value otherwise.
func (o *HeadlessContentItem) GetContentID() int32 {
	if o == nil || IsNil(o.ContentID) {
		var ret int32
		return ret
	}
	return *o.ContentID
}

// GetContentIDOk returns a tuple with the ContentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItem) GetContentIDOk() (*int32, bool) {
	if o == nil || IsNil(o.ContentID) {
		return nil, false
	}
	return o.ContentID, true
}

// HasContentID returns a boolean if a field has been set.
func (o *HeadlessContentItem) HasContentID() bool {
	if o != nil && !IsNil(o.ContentID) {
		return true
	}

	return false
}

// SetContentID gets a reference to the given int32 and assigns it to the ContentID field.
func (o *HeadlessContentItem) SetContentID(v int32) {
	o.ContentID = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentItem) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentItem) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *HeadlessContentItem) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *HeadlessContentItem) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetFields returns the Fields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentItem) GetFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentItem) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *HeadlessContentItem) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *HeadlessContentItem) SetFields(v map[string]interface{}) {
	o.Fields = v
}

// GetSeo returns the Seo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentItem) GetSeo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Seo
}

// GetSeoOk returns a tuple with the Seo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentItem) GetSeoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Seo) {
		return map[string]interface{}{}, false
	}
	return o.Seo, true
}

// HasSeo returns a boolean if a field has been set.
func (o *HeadlessContentItem) HasSeo() bool {
	if o != nil && !IsNil(o.Seo) {
		return true
	}

	return false
}

// SetSeo gets a reference to the given map[string]interface{} and assigns it to the Seo field.
func (o *HeadlessContentItem) SetSeo(v map[string]interface{}) {
	o.Seo = v
}

func (o HeadlessContentItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentID) {
		toSerialize["contentID"] = o.ContentID
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Seo != nil {
		toSerialize["seo"] = o.Seo
	}
	return toSerialize, nil
}

type NullableHeadlessContentItem struct {
	value *HeadlessContentItem
	isSet bool
}

func (v NullableHeadlessContentItem) Get() *HeadlessContentItem {
	return v.value
}

func (v *NullableHeadlessContentItem) Set(val *HeadlessContentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentItem(val *HeadlessContentItem) *NullableHeadlessContentItem {
	return &NullableHeadlessContentItem{value: val, isSet: true}
}

func (v NullableHeadlessContentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


