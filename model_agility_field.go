/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the AgilityField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgilityField{}

// AgilityField struct for AgilityField
type AgilityField struct {
	Name NullableString `json:"name,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Type *AgilityFieldType `json:"type,omitempty"`
	Settings map[string]string `json:"settings,omitempty"`
}

// NewAgilityField instantiates a new AgilityField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgilityField() *AgilityField {
	this := AgilityField{}
	return &this
}

// NewAgilityFieldWithDefaults instantiates a new AgilityField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgilityFieldWithDefaults() *AgilityField {
	this := AgilityField{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgilityField) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgilityField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AgilityField) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AgilityField) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AgilityField) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AgilityField) UnsetName() {
	o.Name.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgilityField) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgilityField) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *AgilityField) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *AgilityField) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *AgilityField) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *AgilityField) UnsetLabel() {
	o.Label.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgilityField) GetType() AgilityFieldType {
	if o == nil || IsNil(o.Type) {
		var ret AgilityFieldType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgilityField) GetTypeOk() (*AgilityFieldType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgilityField) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AgilityFieldType and assigns it to the Type field.
func (o *AgilityField) SetType(v AgilityFieldType) {
	o.Type = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgilityField) GetSettings() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgilityField) GetSettingsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return &o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *AgilityField) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]string and assigns it to the Settings field.
func (o *AgilityField) SetSettings(v map[string]string) {
	o.Settings = v
}

func (o AgilityField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgilityField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableAgilityField struct {
	value *AgilityField
	isSet bool
}

func (v NullableAgilityField) Get() *AgilityField {
	return v.value
}

func (v *NullableAgilityField) Set(val *AgilityField) {
	v.value = val
	v.isSet = true
}

func (v NullableAgilityField) IsSet() bool {
	return v.isSet
}

func (v *NullableAgilityField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgilityField(val *AgilityField) *NullableAgilityField {
	return &NullableAgilityField{value: val, isSet: true}
}

func (v NullableAgilityField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgilityField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


