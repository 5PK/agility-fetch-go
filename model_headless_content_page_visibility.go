/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentPageVisibility type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentPageVisibility{}

// HeadlessContentPageVisibility struct for HeadlessContentPageVisibility
type HeadlessContentPageVisibility struct {
	// Indicates if page is visible in the menu.
	Menu *bool `json:"menu,omitempty"`
	// Indicates if the page is visible in the sitemap.
	Sitemap *bool `json:"sitemap,omitempty"`
}

// NewHeadlessContentPageVisibility instantiates a new HeadlessContentPageVisibility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentPageVisibility() *HeadlessContentPageVisibility {
	this := HeadlessContentPageVisibility{}
	return &this
}

// NewHeadlessContentPageVisibilityWithDefaults instantiates a new HeadlessContentPageVisibility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentPageVisibilityWithDefaults() *HeadlessContentPageVisibility {
	this := HeadlessContentPageVisibility{}
	return &this
}

// GetMenu returns the Menu field value if set, zero value otherwise.
func (o *HeadlessContentPageVisibility) GetMenu() bool {
	if o == nil || IsNil(o.Menu) {
		var ret bool
		return ret
	}
	return *o.Menu
}

// GetMenuOk returns a tuple with the Menu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageVisibility) GetMenuOk() (*bool, bool) {
	if o == nil || IsNil(o.Menu) {
		return nil, false
	}
	return o.Menu, true
}

// HasMenu returns a boolean if a field has been set.
func (o *HeadlessContentPageVisibility) HasMenu() bool {
	if o != nil && !IsNil(o.Menu) {
		return true
	}

	return false
}

// SetMenu gets a reference to the given bool and assigns it to the Menu field.
func (o *HeadlessContentPageVisibility) SetMenu(v bool) {
	o.Menu = &v
}

// GetSitemap returns the Sitemap field value if set, zero value otherwise.
func (o *HeadlessContentPageVisibility) GetSitemap() bool {
	if o == nil || IsNil(o.Sitemap) {
		var ret bool
		return ret
	}
	return *o.Sitemap
}

// GetSitemapOk returns a tuple with the Sitemap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentPageVisibility) GetSitemapOk() (*bool, bool) {
	if o == nil || IsNil(o.Sitemap) {
		return nil, false
	}
	return o.Sitemap, true
}

// HasSitemap returns a boolean if a field has been set.
func (o *HeadlessContentPageVisibility) HasSitemap() bool {
	if o != nil && !IsNil(o.Sitemap) {
		return true
	}

	return false
}

// SetSitemap gets a reference to the given bool and assigns it to the Sitemap field.
func (o *HeadlessContentPageVisibility) SetSitemap(v bool) {
	o.Sitemap = &v
}

func (o HeadlessContentPageVisibility) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentPageVisibility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Menu) {
		toSerialize["menu"] = o.Menu
	}
	if !IsNil(o.Sitemap) {
		toSerialize["sitemap"] = o.Sitemap
	}
	return toSerialize, nil
}

type NullableHeadlessContentPageVisibility struct {
	value *HeadlessContentPageVisibility
	isSet bool
}

func (v NullableHeadlessContentPageVisibility) Get() *HeadlessContentPageVisibility {
	return v.value
}

func (v *NullableHeadlessContentPageVisibility) Set(val *HeadlessContentPageVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentPageVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentPageVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentPageVisibility(val *HeadlessContentPageVisibility) *NullableHeadlessContentPageVisibility {
	return &NullableHeadlessContentPageVisibility{value: val, isSet: true}
}

func (v NullableHeadlessContentPageVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentPageVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


