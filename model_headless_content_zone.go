/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
)

// checks if the HeadlessContentZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentZone{}

// HeadlessContentZone struct for HeadlessContentZone
type HeadlessContentZone struct {
	// Name of the module
	Module NullableString `json:"module,omitempty"`
	Item *HeadlessContentItem `json:"item,omitempty"`
}

// NewHeadlessContentZone instantiates a new HeadlessContentZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentZone() *HeadlessContentZone {
	this := HeadlessContentZone{}
	return &this
}

// NewHeadlessContentZoneWithDefaults instantiates a new HeadlessContentZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentZoneWithDefaults() *HeadlessContentZone {
	this := HeadlessContentZone{}
	return &this
}

// GetModule returns the Module field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentZone) GetModule() string {
	if o == nil || IsNil(o.Module.Get()) {
		var ret string
		return ret
	}
	return *o.Module.Get()
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentZone) GetModuleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Module.Get(), o.Module.IsSet()
}

// HasModule returns a boolean if a field has been set.
func (o *HeadlessContentZone) HasModule() bool {
	if o != nil && o.Module.IsSet() {
		return true
	}

	return false
}

// SetModule gets a reference to the given NullableString and assigns it to the Module field.
func (o *HeadlessContentZone) SetModule(v string) {
	o.Module.Set(&v)
}
// SetModuleNil sets the value for Module to be an explicit nil
func (o *HeadlessContentZone) SetModuleNil() {
	o.Module.Set(nil)
}

// UnsetModule ensures that no value is present for Module, not even an explicit nil
func (o *HeadlessContentZone) UnsetModule() {
	o.Module.Unset()
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *HeadlessContentZone) GetItem() HeadlessContentItem {
	if o == nil || IsNil(o.Item) {
		var ret HeadlessContentItem
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentZone) GetItemOk() (*HeadlessContentItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *HeadlessContentZone) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given HeadlessContentItem and assigns it to the Item field.
func (o *HeadlessContentZone) SetItem(v HeadlessContentItem) {
	o.Item = &v
}

func (o HeadlessContentZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Module.IsSet() {
		toSerialize["module"] = o.Module.Get()
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	return toSerialize, nil
}

type NullableHeadlessContentZone struct {
	value *HeadlessContentZone
	isSet bool
}

func (v NullableHeadlessContentZone) Get() *HeadlessContentZone {
	return v.value
}

func (v *NullableHeadlessContentZone) Set(val *HeadlessContentZone) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentZone) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentZone(val *HeadlessContentZone) *NullableHeadlessContentZone {
	return &NullableHeadlessContentZone{value: val, isSet: true}
}

func (v NullableHeadlessContentZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


