/*
Agility CMS REST API

Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agilitycms

import (
	"encoding/json"
	 
)

// checks if the HeadlessContentItemProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeadlessContentItemProperties{}

// HeadlessContentItemProperties struct for HeadlessContentItemProperties
type HeadlessContentItemProperties struct {
	// The state of this content item. 1 = Staging, 2 = Published, 3 = Deleted, 4 = Approved, 5 = AwaitingApproval, 6 = Declined, 7 = Unpublished
	State *int32 `json:"state,omitempty"`
	// The date/time the item was last modified
	Modified *string `json:"modified,omitempty"`
	// The date/time this item was last modified.
	Created *string `json:"created,omitempty"`
	// The unique versionID of this content item.
	VersionID *int32 `json:"versionID,omitempty"`
	// The reference name of this item is part of. This may be the reference name of a content list, item, or module.
	ReferenceName NullableString `json:"referenceName,omitempty"`
	// The reference name of the content/module definition this item is based on.
	DefinitionName NullableString `json:"definitionName,omitempty"`
	// Used for sync tracking.
	SyncToken *int64 `json:"syncToken,omitempty"`
}

// NewHeadlessContentItemProperties instantiates a new HeadlessContentItemProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadlessContentItemProperties() *HeadlessContentItemProperties {
	this := HeadlessContentItemProperties{}
	return &this
}

// NewHeadlessContentItemPropertiesWithDefaults instantiates a new HeadlessContentItemProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadlessContentItemPropertiesWithDefaults() *HeadlessContentItemProperties {
	this := HeadlessContentItemProperties{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *HeadlessContentItemProperties) GetState() int32 {
	if o == nil || IsNil(o.State) {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItemProperties) GetStateOk() (*int32, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *HeadlessContentItemProperties) SetState(v int32) {
	o.State = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *HeadlessContentItemProperties) GetModified() string {
	if o == nil || IsNil(o.Modified) {
		var ret string
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItemProperties) GetModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given string and assigns it to the Modified field.
func (o *HeadlessContentItemProperties) SetModified(v string) {
	o.Modified = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *HeadlessContentItemProperties) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItemProperties) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *HeadlessContentItemProperties) SetCreated(v string) {
	o.Created = &v
}

// GetVersionID returns the VersionID field value if set, zero value otherwise.
func (o *HeadlessContentItemProperties) GetVersionID() int32 {
	if o == nil || IsNil(o.VersionID) {
		var ret int32
		return ret
	}
	return *o.VersionID
}

// GetVersionIDOk returns a tuple with the VersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItemProperties) GetVersionIDOk() (*int32, bool) {
	if o == nil || IsNil(o.VersionID) {
		return nil, false
	}
	return o.VersionID, true
}

// HasVersionID returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasVersionID() bool {
	if o != nil && !IsNil(o.VersionID) {
		return true
	}

	return false
}

// SetVersionID gets a reference to the given int32 and assigns it to the VersionID field.
func (o *HeadlessContentItemProperties) SetVersionID(v int32) {
	o.VersionID = &v
}

// GetReferenceName returns the ReferenceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentItemProperties) GetReferenceName() string {
	if o == nil || IsNil(o.ReferenceName.Get()) {
		var ret string
		return ret
	}
	return *o.ReferenceName.Get()
}

// GetReferenceNameOk returns a tuple with the ReferenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentItemProperties) GetReferenceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferenceName.Get(), o.ReferenceName.IsSet()
}

// HasReferenceName returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasReferenceName() bool {
	if o != nil && o.ReferenceName.IsSet() {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given NullableString and assigns it to the ReferenceName field.
func (o *HeadlessContentItemProperties) SetReferenceName(v string) {
	o.ReferenceName.Set(&v)
}
// SetReferenceNameNil sets the value for ReferenceName to be an explicit nil
func (o *HeadlessContentItemProperties) SetReferenceNameNil() {
	o.ReferenceName.Set(nil)
}

// UnsetReferenceName ensures that no value is present for ReferenceName, not even an explicit nil
func (o *HeadlessContentItemProperties) UnsetReferenceName() {
	o.ReferenceName.Unset()
}

// GetDefinitionName returns the DefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeadlessContentItemProperties) GetDefinitionName() string {
	if o == nil || IsNil(o.DefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.DefinitionName.Get()
}

// GetDefinitionNameOk returns a tuple with the DefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeadlessContentItemProperties) GetDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefinitionName.Get(), o.DefinitionName.IsSet()
}

// HasDefinitionName returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasDefinitionName() bool {
	if o != nil && o.DefinitionName.IsSet() {
		return true
	}

	return false
}

// SetDefinitionName gets a reference to the given NullableString and assigns it to the DefinitionName field.
func (o *HeadlessContentItemProperties) SetDefinitionName(v string) {
	o.DefinitionName.Set(&v)
}
// SetDefinitionNameNil sets the value for DefinitionName to be an explicit nil
func (o *HeadlessContentItemProperties) SetDefinitionNameNil() {
	o.DefinitionName.Set(nil)
}

// UnsetDefinitionName ensures that no value is present for DefinitionName, not even an explicit nil
func (o *HeadlessContentItemProperties) UnsetDefinitionName() {
	o.DefinitionName.Unset()
}

// GetSyncToken returns the SyncToken field value if set, zero value otherwise.
func (o *HeadlessContentItemProperties) GetSyncToken() int64 {
	if o == nil || IsNil(o.SyncToken) {
		var ret int64
		return ret
	}
	return *o.SyncToken
}

// GetSyncTokenOk returns a tuple with the SyncToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadlessContentItemProperties) GetSyncTokenOk() (*int64, bool) {
	if o == nil || IsNil(o.SyncToken) {
		return nil, false
	}
	return o.SyncToken, true
}

// HasSyncToken returns a boolean if a field has been set.
func (o *HeadlessContentItemProperties) HasSyncToken() bool {
	if o != nil && !IsNil(o.SyncToken) {
		return true
	}

	return false
}

// SetSyncToken gets a reference to the given int64 and assigns it to the SyncToken field.
func (o *HeadlessContentItemProperties) SetSyncToken(v int64) {
	o.SyncToken = &v
}

func (o HeadlessContentItemProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeadlessContentItemProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.VersionID) {
		toSerialize["versionID"] = o.VersionID
	}
	if o.ReferenceName.IsSet() {
		toSerialize["referenceName"] = o.ReferenceName.Get()
	}
	if o.DefinitionName.IsSet() {
		toSerialize["definitionName"] = o.DefinitionName.Get()
	}
	if !IsNil(o.SyncToken) {
		toSerialize["syncToken"] = o.SyncToken
	}
	return toSerialize, nil
}

type NullableHeadlessContentItemProperties struct {
	value *HeadlessContentItemProperties
	isSet bool
}

func (v NullableHeadlessContentItemProperties) Get() *HeadlessContentItemProperties {
	return v.value
}

func (v *NullableHeadlessContentItemProperties) Set(val *HeadlessContentItemProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadlessContentItemProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadlessContentItemProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadlessContentItemProperties(val *HeadlessContentItemProperties) *NullableHeadlessContentItemProperties {
	return &NullableHeadlessContentItemProperties{value: val, isSet: true}
}

func (v NullableHeadlessContentItemProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadlessContentItemProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


